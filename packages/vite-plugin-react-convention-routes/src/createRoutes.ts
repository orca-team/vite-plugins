import fg from 'fast-glob';
import buildRoutes from './buildRoutes';
import type { BuildRoutesOptions } from './defs';

const { glob } = fg;

export type CreateRoutesOptions = BuildRoutesOptions & {

  /**
   * 是否按需加载，默认为 true
   */
  dynamic?: boolean;

  dot?: boolean;
  deep?: number;
  ignore?: string[];
  globRule?: string | string[];
};

const defaultIgnore = ['**/node_modules/**', '**/components/**', '**/layouts/**', '**/services/**', '**/model/**', '**/hox/**'];

const defaultGlobRule = ['*.{js,jsx,ts,tsx}', '**/*.{js,jsx,ts,tsx}'];

export async function createRoutes(pageRoot: string, options: CreateRoutesOptions = {}) {
  const { dynamic = true, dot, globRule = defaultGlobRule, deep, ignore = defaultIgnore, ...otherOptions } = options;
  const pageMapping = await glob(globRule, {
    cwd: pageRoot,
    dot,
    deep,
    ignore,
    onlyFiles: true,
  });

  let routesString = JSON.stringify(buildRoutes(pageRoot, pageMapping, otherOptions), null, 2);

  const importList: string[] = [];

  // 替换 import 占位符
  routesString = routesString.replace(/"@import\|(.+)\|(layout)?"/g, (_, path, isLayout) => {
    if (dynamic) {
      return `createElement(lazy(() => import('${path}')), {}, ${isLayout ? 'createElement(Outlet)' : 'undefined'})`;
    }
    // 对路径进行转义，确保可作为变量的名称
    const escapedPath = path.replace(/[^a-zA-Z0-9_]/g, '_');
    importList.push(`import ${escapedPath} from '${path}';`);
    return `createElement(${escapedPath}, {}, ${isLayout ? 'createElement(Outlet)' : 'undefined'})`;
  });

  return `/* Generated by \`@orca-fe/vite-plugin-react-convention-routes\` */
import { lazy, createElement } from 'react';
import { Outlet } from 'react-router-dom';

${importList.join('\n')}

const routes = ${routesString};
console.log(routes);

export default routes;

`;
}
